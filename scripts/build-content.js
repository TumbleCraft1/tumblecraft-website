const fs = require('fs')
const path = require('path')
const matter = require('gray-matter')
const { remark } = require('remark')
const html = require('remark-html').default

async function buildContent() {
  const contentDirectory = path.join(process.cwd(), 'src/content')
  const filenames = fs.readdirSync(contentDirectory)
  
  const guides = await Promise.all(
    filenames
      .filter(name => name.endsWith('.md'))
      .map(async (name) => {
        const slug = name.replace(/\.md$/, '')
        const filePath = path.join(contentDirectory, name)
        const fileContents = fs.readFileSync(filePath, 'utf8')
        const { data, content } = matter(fileContents)
        
        const processedContent = await remark()
          .use(html)
          .process(content)
        
        return {
          slug,
          title: data.title || slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
          description: data.description || 'Guide documentation',
          content: processedContent.toString(),
          data
        }
      })
  )
  
  const sortedGuides = guides.sort((a, b) => a.title.localeCompare(b.title))
  
  // Generate the content file
  const contentFile = `// Auto-generated content file
// Do not edit manually - this file is generated by scripts/build-content.js

export interface MarkdownContent {
  content: string
  data: {
    title?: string
    description?: string
    [key: string]: unknown
  }
}

export interface GuideItem {
  slug: string
  title: string
  description: string
  content: string
  data: {
    [key: string]: unknown
  }
}

export const STATIC_GUIDES: GuideItem[] = ${JSON.stringify(sortedGuides, null, 2)}

export function getAllGuides(): GuideItem[] {
  return STATIC_GUIDES
}

export function getGuideBySlug(slug: string): GuideItem | undefined {
  return STATIC_GUIDES.find(guide => guide.slug === slug)
}

export async function getMarkdownContent(slug: string): Promise<MarkdownContent> {
  const guide = getGuideBySlug(slug)
  if (!guide) {
    throw new Error(\`Guide not found: \${slug}\`)
  }
  
  return {
    content: guide.content,
    data: guide.data
  }
}
`
  
  fs.writeFileSync(path.join(process.cwd(), 'src/lib/static-content.ts'), contentFile)
  console.log(`Generated static content for ${sortedGuides.length} guides`)
}

buildContent().catch(console.error)